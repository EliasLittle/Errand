{ x = (1::Int Add 2::Int); y = "Hello"::String; z = "World"::String; (y::Any Add (" "::String Add z::Any)); fn hello() { { return "Hello World"::String } }; hello(); fn loop_a(str1, str2, num) { { i = 0::Int; tot_str = ""::String; while (i::Any LessThan num::Any) { { tot_str = (tot_str::Any Add str1::Any); print(("print: "::String Add tot_str::Any)); i = (i::Any Add 1::Int) } }; return (tot_str::Any Add str2::Any) } }; loop_a(y::Any, z::Any, x::Any); struct point { x, y }; alpha = point(1::Int, 2::Int); beta = point(3::Int, 5::Int); alpha::Any; beta::Any; fn sq_distance(a, b) { { x_dif = ((a::Any Dot x::Any) Subtract (b::Any Dot x::Any)); y_dif = ((a::Any Dot y::Any) Subtract (b::Any Dot y::Any)); return (x_dif::Any Multiply (x_dif::Any Add (y_dif::Any Multiply y_dif::Any))) } }; sq_distance(alpha::Any, beta::Any) }