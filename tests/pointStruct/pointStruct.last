{ fn Point(x::Int, y::Int) -> Point { return new(:Point, x::Int, y::Int) }; struct Point { x, y }; (a::Any Assignment Point(1::Int, 2::Int)); (b::Point Assignment new(:Point, 3::Int, 4::Int)); { (_tmp_str_0::String Assignment malloc((strlen("'a' pointer: %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "'a' pointer: %p
"::String); printf(_tmp_str_0::String, a::Any); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("a.x manual (pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "a.x manual (pointer): %p
"::String); printf(_tmp_str_0::String, (a::Any Add 0::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("a.x manual (mem_load pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "a.x manual (mem_load pointer): %p
"::String); printf(_tmp_str_0::String, _mem_load(a::Any, 0::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("a.x manual (mem_load int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "a.x manual (mem_load int): %d
"::String); printf(_tmp_str_0::String, _mem_load(a::Any, 0::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("a.y manual (pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "a.y manual (pointer): %p
"::String); printf(_tmp_str_0::String, (a::Any Add 8::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("a.y manual (mem_load pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "a.y manual (mem_load pointer): %p
"::String); printf(_tmp_str_0::String, _mem_load(a::Any, 8::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("a.y manual (mem_load int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "a.y manual (mem_load int): %d
"::String); printf(_tmp_str_0::String, _mem_load(a::Any, 8::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("X (int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "X (int): %d
"::String); printf(_tmp_str_0::String, getfield(a::Any, :x, typeof(a::Any))); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("Y (int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "Y (int): %d
"::String); printf(_tmp_str_0::String, getfield(a::Any, :y, typeof(a::Any))); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("'b' pointer: %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "'b' pointer: %p
"::String); printf(_tmp_str_0::String, b::Any); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("b.x manual (pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "b.x manual (pointer): %p
"::String); printf(_tmp_str_0::String, (b::Any Add 0::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("b.x manual (mem_load pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "b.x manual (mem_load pointer): %p
"::String); printf(_tmp_str_0::String, _mem_load(b::Any, 0::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("b.x manual (mem_load int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "b.x manual (mem_load int): %d
"::String); printf(_tmp_str_0::String, _mem_load(b::Any, 0::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("b.y manual (pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "b.y manual (pointer): %p
"::String); printf(_tmp_str_0::String, (b::Any Add 8::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("b.y manual (mem_load pointer): %p
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "b.y manual (mem_load pointer): %p
"::String); printf(_tmp_str_0::String, _mem_load(b::Any, 8::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("b.y manual (mem_load int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "b.y manual (mem_load int): %d
"::String); printf(_tmp_str_0::String, _mem_load(b::Any, 8::Int)); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("X (int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "X (int): %d
"::String); printf(_tmp_str_0::String, getfield(b::Any, :x, typeof(b::Any))); free(_tmp_str_0::String) }; { (_tmp_str_0::String Assignment malloc((strlen("Y (int): %d
"::String) Add 1::Int))); strcpy(_tmp_str_0::String, "Y (int): %d
"::String); printf(_tmp_str_0::String, getfield(b::Any, :y, typeof(b::Any))); free(_tmp_str_0::String) } }