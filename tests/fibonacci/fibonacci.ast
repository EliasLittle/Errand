{ foreign fn printf(a::Int) -> Int { {  } }; foreign fn malloc(a::Int) -> Int { {  } }; foreign fn free(a::Int) -> Int { {  } }; foreign fn strlen(a::Int) -> Int { {  } }; foreign fn strcpy(a::Int, b::Int) -> Int { {  } }; foreign fn strcmp(a::Int, b::Int) -> Int32 { {  } }; fn strlen(a::String) { { return strlen(as_ptr(a::Any)) } }; fn strcpy(a::String, b::String) { { return strcpy(as_ptr(a::Any), as_ptr(b::Any)) } }; fn free(a::String) { { return free(as_ptr(a::Any)) } }; fn fibonacci(n::Any) { { if (n::Any LessThanEqual 1::Int) { { return n::Any } }; return (fibonacci((n::Any Subtract 1::Int)) Add fibonacci((n::Any Subtract 2::Int))) } }; printf("%d
"::String, fibonacci(35::Int)) }