Received file path: tests/basic.err
Starting to lex the file
Lexer processed tokens successfully.
------ Parsing new top level expression ------
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Identifier("x"))
Parsing primary| current:Some(Identifier("x"))
Checking prefix operator| current:Some(Identifier("x"))
Parsing inner primary| current:Some(Identifier("x"))
Parsing identifier| current:Some(Identifier("x"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "x" }), current:Some(Assignment)
Parsing expression 1| op:Token { token_type: Assignment, line: 1, column: 49 }, min_precedence:0
Parsing primary| current:Some(Number(7.0))
Checking prefix operator| current:Some(Number(7.0))
Parsing inner primary| current:Some(Number(7.0))
Parsing literal| current:Some(Number(7.0)) expected:Number(7.0)
Parsing expression 1| rhs:Number(7.0)
Applying infix operator: Identifier(Id { name: "x" }) Assignment Number(7.0)
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "x" }, value: Number(7.0) })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "x" }, value: Number(7.0) })
------ Parsing new top level expression ------
Parsing expression| current:Some(Identifier("y"))
Parsing primary| current:Some(Identifier("y"))
Checking prefix operator| current:Some(Identifier("y"))
Parsing inner primary| current:Some(Identifier("y"))
Parsing identifier| current:Some(Identifier("y"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "y" }), current:Some(Assignment)
Parsing expression 1| op:Token { token_type: Assignment, line: 1, column: 55 }, min_precedence:0
Parsing primary| current:Some(StringLiteral("Hello"))
Checking prefix operator| current:Some(StringLiteral("Hello"))
Parsing inner primary| current:Some(StringLiteral("Hello"))
Parsing literal| current:Some(StringLiteral("Hello")) expected:StringLiteral("Hello")
Parsing expression 1| rhs:String("Hello")
Applying infix operator: Identifier(Id { name: "y" }) Assignment String("Hello")
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "y" }, value: String("Hello") })
------ Parsing new top level expression ------
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Function)
Parsing function| current:Some(Function)
Parsing parameters| current:Some(Identifier("a"))
Parsing block| Starting block: Some(Return)
Parsing block| not end: Some(Return)
Parsing expression| current:Some(Return)
Parsing return statement| current:Some(Return)
Parsing primary| current:Some(Identifier("a"))
Checking prefix operator| current:Some(Identifier("a"))
Parsing inner primary| current:Some(Identifier("a"))
Parsing identifier| current:Some(Identifier("a"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "a" }), current:Some(Plus)
Parsing expression 1| op:Token { token_type: Plus, line: 1, column: 141 }, min_precedence:0
Parsing primary| current:Some(Identifier("b"))
Checking prefix operator| current:Some(Identifier("b"))
Parsing inner primary| current:Some(Identifier("b"))
Parsing identifier| current:Some(Identifier("b"))
Identifier
Parsing expression 1| rhs:Identifier(Id { name: "b" })
Applying infix operator: Identifier(Id { name: "a" }) Plus Identifier(Id { name: "b" })
No infix operator found
Parsing expression 1| End of expression 1
Parsing return statement| end of return
Parsing expression| result:Ok(Return(Some(BinaryOp { operator: Add, left: Identifier(Id { name: "a" }), right: Identifier(Id { name: "b" }) })))
Parsing block| End of block
Parsing function| End of function
Parsing expression| result:Ok(FunctionDefinition { id: Id { name: "add" }, parameters: [Parameter { id: Id { name: "a" } }, Parameter { id: Id { name: "b" } }], body: Block([Return(Some(BinaryOp { operator: Add, left: Identifier(Id { name: "a" }), right: Identifier(Id { name: "b" }) }))]) })
Parsing expression| result:Ok(FunctionDefinition { id: Id { name: "add" }, parameters: [Parameter { id: Id { name: "a" } }, Parameter { id: Id { name: "b" } }], body: Block([Return(Some(BinaryOp { operator: Add, left: Identifier(Id { name: "a" }), right: Identifier(Id { name: "b" }) }))]) })
------ Parsing new top level expression ------
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Identifier("result"))
Parsing primary| current:Some(Identifier("result"))
Checking prefix operator| current:Some(Identifier("result"))
Parsing inner primary| current:Some(Identifier("result"))
Parsing identifier| current:Some(Identifier("result"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "result" }), current:Some(Assignment)
Parsing expression 1| op:Token { token_type: Assignment, line: 1, column: 309 }, min_precedence:0
Parsing primary| current:Some(Identifier("add"))
Checking prefix operator| current:Some(Identifier("add"))
Parsing inner primary| current:Some(Identifier("add"))
Parsing identifier| current:Some(Identifier("add"))
Function call
Parsing arguments| current:Some(Number(5.0))
Parsing primary| current:Some(Number(5.0))
Checking prefix operator| current:Some(Number(5.0))
Parsing inner primary| current:Some(Number(5.0))
Parsing literal| current:Some(Number(5.0)) expected:Number(5.0)
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Number(5.0), current:Some(Comma)
No infix operator found
Parsing expression 1| End of expression 1
Parsing primary| current:Some(Number(3.0))
Checking prefix operator| current:Some(Number(3.0))
Parsing inner primary| current:Some(Number(3.0))
Parsing literal| current:Some(Number(3.0)) expected:Number(3.0)
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Number(3.0), current:Some(RParen)
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression 1| rhs:FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] }
Applying infix operator: Identifier(Id { name: "result" }) Assignment FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] }
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "result" }, value: FunctionCall { id: Id { name: "add" }, arguments: [Number(5.0), Number(3.0)] } })
------ Parsing new top level expression ------
Parsing expression| current:Some(Identifier("doubled"))
Parsing primary| current:Some(Identifier("doubled"))
Checking prefix operator| current:Some(Identifier("doubled"))
Parsing inner primary| current:Some(Identifier("doubled"))
Parsing identifier| current:Some(Identifier("doubled"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "doubled" }), current:Some(Assignment)
Parsing expression 1| op:Token { token_type: Assignment, line: 1, column: 329 }, min_precedence:0
Parsing primary| current:Some(Identifier("double"))
Checking prefix operator| current:Some(Identifier("double"))
Parsing inner primary| current:Some(Identifier("double"))
Parsing identifier| current:Some(Identifier("double"))
Function call
Parsing arguments| current:Some(Identifier("result"))
Parsing primary| current:Some(Identifier("result"))
Checking prefix operator| current:Some(Identifier("result"))
Parsing inner primary| current:Some(Identifier("result"))
Parsing identifier| current:Some(Identifier("result"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "result" }), current:Some(RParen)
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression 1| rhs:FunctionCall { id: Id { name: "double" }, arguments: [Identifier(Id { name: "result" })] }
Applying infix operator: Identifier(Id { name: "doubled" }) Assignment FunctionCall { id: Id { name: "double" }, arguments: [Identifier(Id { name: "result" })] }
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "doubled" }, value: FunctionCall { id: Id { name: "double" }, arguments: [Identifier(Id { name: "result" })] } })
------ Parsing new top level expression ------
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Identifier("greeting"))
Parsing primary| current:Some(Identifier("greeting"))
Checking prefix operator| current:Some(Identifier("greeting"))
Parsing inner primary| current:Some(Identifier("greeting"))
Parsing identifier| current:Some(Identifier("greeting"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "greeting" }), current:Some(Assignment)
Parsing expression 1| op:Token { token_type: Assignment, line: 1, column: 389 }, min_precedence:0
Parsing primary| current:Some(StringLiteral("Hello"))
Checking prefix operator| current:Some(StringLiteral("Hello"))
Parsing inner primary| current:Some(StringLiteral("Hello"))
Parsing literal| current:Some(StringLiteral("Hello")) expected:StringLiteral("Hello")
Parsing expression 1| rhs:String("Hello")
Applying infix operator: Identifier(Id { name: "greeting" }) Assignment String("Hello")
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "greeting" }, value: String("Hello") })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "greeting" }, value: String("Hello") })
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "greeting" }, value: String("Hello") })
------ Parsing new top level expression ------
Parsing expression| current:Some(Identifier("name"))
Parsing primary| current:Some(Identifier("name"))
Checking prefix operator| current:Some(Identifier("name"))
Parsing inner primary| current:Some(Identifier("name"))
Parsing identifier| current:Some(Identifier("name"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "name" }), current:Some(Assignment)
Parsing expression 1| op:Token { token_type: Assignment, line: 1, column: 404 }, min_precedence:0
Parsing primary| current:Some(StringLiteral("World"))
Checking prefix operator| current:Some(StringLiteral("World"))
Parsing inner primary| current:Some(StringLiteral("World"))
Parsing literal| current:Some(StringLiteral("World")) expected:StringLiteral("World")
Parsing expression 1| rhs:String("World")
Applying infix operator: Identifier(Id { name: "name" }) Assignment String("World")
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "name" }, value: String("World") })
------ Parsing new top level expression ------
Parsing expression| current:Some(Identifier("message"))
Parsing primary| current:Some(Identifier("message"))
Checking prefix operator| current:Some(Identifier("message"))
Parsing inner primary| current:Some(Identifier("message"))
Parsing identifier| current:Some(Identifier("message"))
Identifier
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "message" }), current:Some(Assignment)
Parsing expression 1| op:Token { token_type: Assignment, line: 1, column: 422 }, min_precedence:0
Parsing primary| current:Some(Identifier("greeting"))
Checking prefix operator| current:Some(Identifier("greeting"))
Parsing inner primary| current:Some(Identifier("greeting"))
Parsing identifier| current:Some(Identifier("greeting"))
Identifier
Parsing expression 1| rhs:Identifier(Id { name: "greeting" })
Parsing expression 1| next op:Plus
Parsing expression 1| left associative precedence:1
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "greeting" }), current:Some(Plus)
Parsing expression 1| op:Token { token_type: Plus, line: 1, column: 433 }, min_precedence:1
Parsing primary| current:Some(StringLiteral(" "))
Checking prefix operator| current:Some(StringLiteral(" "))
Parsing inner primary| current:Some(StringLiteral(" "))
Parsing literal| current:Some(StringLiteral(" ")) expected:StringLiteral(" ")
Parsing expression 1| rhs:String(" ")
Parsing expression 1| next op:Plus
Applying infix operator: Identifier(Id { name: "greeting" }) Plus String(" ")
Parsing expression 1| op:Token { token_type: Plus, line: 1, column: 439 }, min_precedence:1
Parsing primary| current:Some(Identifier("name"))
Checking prefix operator| current:Some(Identifier("name"))
Parsing inner primary| current:Some(Identifier("name"))
Parsing identifier| current:Some(Identifier("name"))
Identifier
Parsing expression 1| rhs:Identifier(Id { name: "name" })
Applying infix operator: BinaryOp { operator: Add, left: Identifier(Id { name: "greeting" }), right: String(" ") } Plus Identifier(Id { name: "name" })
No infix operator found
Parsing expression 1| End of expression 1
Applying infix operator: Identifier(Id { name: "message" }) Assignment BinaryOp { operator: Add, left: BinaryOp { operator: Add, left: Identifier(Id { name: "greeting" }), right: String(" ") }, right: Identifier(Id { name: "name" }) }
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(VariableAssignment { id: Id { name: "message" }, value: BinaryOp { operator: Add, left: BinaryOp { operator: Add, left: Identifier(Id { name: "greeting" }), right: String(" ") }, right: Identifier(Id { name: "name" }) } })
------ Parsing new top level expression ------
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Newline)
Parsing expression| current:Some(Print)
Parsing print statement| current:Some(Print)
Parsing primary| current:Some(LParen)
Checking prefix operator| current:Some(LParen)
Parsing inner primary| current:Some(LParen)
Parsing parenthesized expression| current:Some(LParen)
Parsing primary| current:Some(Identifier("message"))
Checking prefix operator| current:Some(Identifier("message"))
Parsing inner primary| current:Some(Identifier("message"))
Parsing identifier| current:Some(Identifier("message"))
Identifier
Parenthesized | primary expression: Identifier(Id { name: "message" })
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "message" }), current:Some(RParen)
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "message" }), current:Some(Newline)
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(Print(Identifier(Id { name: "message" })))
Parsing expression| result:Ok(Print(Identifier(Id { name: "message" })))
Parsing expression| result:Ok(Print(Identifier(Id { name: "message" })))
Parsing expression| result:Ok(Print(Identifier(Id { name: "message" })))
Parsing expression| result:Ok(Print(Identifier(Id { name: "message" })))
Parsing expression| result:Ok(Print(Identifier(Id { name: "message" })))
Parsing expression| result:Ok(Print(Identifier(Id { name: "message" })))
------ Parsing new top level expression ------
Parsing expression| current:Some(Print)
Parsing print statement| current:Some(Print)
Parsing primary| current:Some(LParen)
Checking prefix operator| current:Some(LParen)
Parsing inner primary| current:Some(LParen)
Parsing parenthesized expression| current:Some(LParen)
Parsing primary| current:Some(Identifier("doubled"))
Checking prefix operator| current:Some(Identifier("doubled"))
Parsing inner primary| current:Some(Identifier("doubled"))
Parsing identifier| current:Some(Identifier("doubled"))
Identifier
Parenthesized | primary expression: Identifier(Id { name: "doubled" })
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "doubled" }), current:Some(RParen)
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression 1| Starting -------------------
Parsing expression 1| lhs:Identifier(Id { name: "doubled" }), current:Some(Newline)
No infix operator found
Parsing expression 1| End of expression 1
Parsing expression| result:Ok(Print(Identifier(Id { name: "doubled" })))
------ End of parsing ------
AST: { x = 7; y = "Hello"; fn add(a, b) { { return (a Add b) } }; result = add(5, 3); doubled = double(result); greeting = "Hello"; name = "World"; message = ((greeting Add " ") Add name); print(message); print(doubled) }
